for(predictor in predictors)
{
# Fit linear regression
model <- lm(as.formula(paste(response, "~", predictor)), data = dataset)
# Extract summary statistics
summary_fit <- summary(model)
# Create a table with key regression metrics
regression_table <- data.frame(
Predictor = predictor,
Estimate = summary_fit$coefficients[2, 1],  # Coefficient for predictor
Std_Error = summary_fit$coefficients[2, 2], # Standard Error
t_Value = summary_fit$coefficients[2, 3],   # t-value
p_Value = summary_fit$coefficients[2, 4],   # p-value
)
# Store in the list
regression_summaries[[predictor]] <- regression_table
}
#store dataset
dataset = read.csv("Concrete_Data.csv")
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag"," Fly Ash","Water ","Superplasticizer","Coarse Aggregate","Fine Aggregate"," Age (day)","CCS")
#store the dimensions of dataset
n = nrow(dataset)                         #number of instances
p = ncol(dataset) - 1                     #number of predictors
# Exploratory data analysis
<hr>
## Summary Statistics
| Number of instances: 1030
<br>
```{r,warning=FALSE}
spread = NULL
for(i in 1:p)
spread = cbind(spread,c(sd(dataset[,i]),range(dataset[,i])))
colnames(spread) = colnames(dataset[1:8])
rownames(spread) = c("Std Deviation","Min","Max")
library(knitr)
kable(spread)
### Analysis Of Numerical Summaries
kable(spread)
summary(dataset)
<hr>
## Visulaization
<hr>
### Histograms
```{r}
par(mfrow = c(2, 4))
for (i in 1:p) {
hist(dataset[,i],'FD',col = "lightblue",main = paste(colnames(dataset)[i]),xlab = colnames(dataset)[i],probability = TRUE)
abline(v = mean(dataset[,i]) , lty = 2)
}
### Boxplots
### Interpretations for Predictors
### Pair Plots
### Correlations between predictors
<hr>
#### Correlation matrix image
#### Table of correlation and CI for each pair of variables
#### Interpretation
<hr>
### Correlations between response and predictors
<hr>
#### Table of correlation and CI between response and each predictor
#### Interpretation
<hr>
### Questions
<hr>
#store dataset
dataset = read.csv("Concrete_Data.csv")
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag"," Fly Ash","Water ","Superplasticizer","Coarse Aggregate","Fine Aggregate"," Age (day)","CCS")
#store the dimensions of dataset
n = nrow(dataset)                         #number of instances
p = ncol(dataset) - 1                     #number of predictors
# Exploratory data analysis
<hr>
## Summary Statistics
| Number of instances: 1030
<br>
```{r,warning=FALSE}
spread = NULL
for(i in 1:p)
spread = cbind(spread,c(sd(dataset[,i]),range(dataset[,i])))
colnames(spread) = colnames(dataset[1:8])
rownames(spread) = c("Std Deviation","Min","Max")
library(knitr)
kable(spread)
kable(spread)
summary(dataset)
summary(dataset)
### Analysis Of Numerical Summaries
<hr>
## Visulaization
<hr>
### Histograms
```{r}
par(mfrow = c(2, 4))
for (i in 1:p) {
hist(dataset[,i],'FD',col = "lightblue",main = paste(colnames(dataset)[i]),xlab = colnames(dataset)[i],probability = TRUE)
abline(v = mean(dataset[,i]) , lty = 2)
}
### Boxplots
```{r}
boxplot(dataset[,1:8], col = "orange", main = "Boxplots for All Predictors", cex.axis = 0.7,
las = 2)
### Interpretations for Predictors
### Pair Plots
```{r}
pairs(dataset[,c(1,2,3,6,7)], main = "Pairplot of Important Predictors", col = "blue",lower.panel = NULL)
pairs(dataset[,c(1,2,3,6,7)], main = "Pairplot of Important Predictors", col = "blue",lower.panel = NULL)
### Correlations between predictors
<hr>
#### Correlation matrix image
```{r,warning=FALSE}
#Load required libraries
library(ggplot2)
library(reshape)
#calculate correlation and transform it by melt() to make it suitable for ggplot
cormat = melt(cor(dataset[1:8]))
#plot the correlation and adjust width of x labels
ggplot(data = cormat,aes(x = X1,y = X2,fill = value))+
geom_tile()  +                     #creates heatmap
geom_text(aes(label = round(value, 2)), color = "white", size = 4)+                     #Add values inside tiles
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 2))                        #Wrap long labels
#### Table of correlation and CI for each pair of variables
```{r,warning=FALSE}
cortable = NULL
#Iterate through all predictors
for(i in 1:p)
{
for(j in (i+1):p)
{
#calculate correlation
test = cor.test(dataset[,i],dataset[,j])
#extract the necessary information and add to cortable
cortable = rbind(cortable,c(colnames(dataset)[i],colnames(dataset)[j],signif(test$estimate,3),signif(test$conf.int,3),signif(test$p.value,3)))
}
}
#name the columns
colnames(cortable) <- c("Predictor1", "Predictor2", "Estimate", "Conf_Int_Lower", "Conf_Int_Upper", "p_value")
#exclude the last row
cortable = cortable[-nrow(cortable),]
#library to display in table format
library(DT)
datatable(cortable, caption = "Correlation Table with Confidence Intervals")
#### Interpretation
<hr>
### Correlations between response and predictors
<hr>
#### Table of correlation and CI between response and each predictor
```{r}
cor = NULL
#iterate through predictors
for(i in 1:p)
{
#calculate corelation
test = cor.test(dataset[,i],dataset$CCS)
#extract necesscary info and add to cor table
cor = rbind(cor,c(colnames(dataset)[i],signif(test$estimate,3),signif(test$conf.int,3),signif(test$p.value,3)))
}
#name the columns
colnames(cor) = c("Predictor","Estimate", "Conf_Int_Lower", "Conf_Int_Upper", "p_value")
#display cor in table format
library(DT)
datatable(cor, caption = "Table of correlation and CI between response and each predictor ")
#### Interpretation
<hr>
### Questions
<hr>
# Linear Regression Analysis
<br>
# Print model summary
summary(model)
# Fit multiple linear regression model
model <- lm(CCS ~ Cement + Water + Age, data = dataset)
colnames(dataset)
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag"," Fly Ash","Water","Superplasticizer","Coarse Aggregate","Fine Aggregate"," Age (day)","CCS")
# Fit multiple linear regression model
model <- lm(CCS ~ Cement + Water + Age, data = dataset)
colnames(dataset)
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag"," Fly Ash","Water","Superplasticizer","Coarse Aggregate","Fine Aggregate","Age (day)","CCS")
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag"," Fly Ash","Water","Superplasticizer","Coarse Aggregate","Fine Aggregate","Age","CCS")
# Fit multiple linear regression model
model <- lm(CCS ~ Cement + Blast Furnace Slag + Fly Ash + Water +Superplasticizer+ Age +Coarse Aggregate+Fine Aggregate data = dataset)
# Fit multiple linear regression model
model = lm(CCS ~ Cement + `Blast Furnace Slag` + `Fly Ash` + Water +Superplasticizer+ Age +`Coarse Aggregate`+`Fine Aggregate`, data = dataset)
colnames(dataset)
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag","Fly Ash","Water","Superplasticizer","Coarse Aggregate","Fine Aggregate","Age","CCS")
# Fit multiple linear regression model
model = lm(CCS ~ Cement + `Blast Furnace Slag` + `Fly Ash` + Water +Superplasticizer+ Age +`Coarse Aggregate`+`Fine Aggregate`, data = dataset)
# Print model summary
summary(model)
summary(model)
first_start = lm(CCS ~ 1,data = dataset)
summary(first)
first_start = lm(CCS ~ 1,data = dataset)
summary(first_start)
mean(dataset$CCS)
summary(first_start)
mean(dataset$CCS)
summary(first_start)
mean(dataset$CCS)
#start with empty predictors
#scope defines max number of predictors to include
step(first_start,direction = "forward",scope = formula(model))
# Stepwise selection using AIC
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
# Stepwise selection using AIC
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)))
print(stepwise_BIC)
# Stepwise selection using AIC
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
print(model_BIC)
model_BIC = formula(stepwise_BIC)
print(model_BIC)
print(model_AIC)
model_AIC = formula(stepwise_AIC)
print(model_AIC)
```{r}
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)))
print(model_BIC)
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
cat("\n### Model Selected by AIC:\n", format(formula(stepwise_AIC)), "\n")
AIC(stepwise_AIC)
AIC(stepwise_AIC)
stepwise_AIC
stepwise_AIC
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
stepwise_AIC
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)))
print(model_BIC)
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
print(stepwise_AIC)
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)))
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)),trace = FALSE)
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)),trace = FALSE)
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)),trace = FALSE)
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)),trace = FALSE)
stepwise_BIC
# Stepwise selection using BIC
stepwise_BIC = step(first_start,direction = "forward",scope = formula(model), k = log(nrow(dataset)))
# Stepwise selection using AIC
stepwise_AIC = step(first_start,direction = "forward",scope = formula(model))
closeAllConnections()
#store dataset
dataset = read.csv("Concrete_Data.csv")
dataset = unique(dataset)
#rename columns of dataset for simplicity
colnames(dataset) = c("Cement","Blast Furnace Slag","Fly Ash","Water","Superplasticizer","Coarse Aggregate","Fine Aggregate","Age","CCS")
#store the dimensions of dataset
n = nrow(dataset)                         #number of instances
n
1030 - 1005
dataset
plot(dataset$`Blast Furnace Slag`,dataset$`Fly Ash`)
