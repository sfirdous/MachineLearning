closeAllConnections()
closeAllConnections()
mean_center(X)
mean_center(X)
mean_center(X)
mean_center = function(X)
{
#X: nxp matrix
#n: number of casses
#p: number of features/variables
Y = NULL
for(i in 1:p)
{
mean_i = mean(X[,i])
centered_col = numeric(n)
for(j in 1:n)
{
centered_col[j] = X[j,i] - mean_i
}
Y = cbind(Y,centered_col)
}
colnames(Y) = colnames(X)
return (Y)
}
data
mean_center(data)
y  = mean_center(data)
y
dim(y)
mean_center = function(X)
{
#X: nxp matrix
n = nrows(X)
p = ncols(X)
#n: number of casses
#p: number of features/variables
Y = NULL
for(i in 1:p)
{
mean_i = mean(X[,i])
centered_col = numeric(n)
for(j in 1:n)
{
centered_col[j] = X[j,i] - mean_i
}
Y = cbind(Y,centered_col)
}
colnames(Y) = colnames(X)
return (Y)
}
y  = mean_center(data)
mean_center = function(X)
{
#X: nxp matrix
n = nrows(X)
p = ncols(X)
#n: number of casses
#p: number of features/variables
Y = NULL
for(i in 1:p)
{
mean_i = mean(X[,i])
centered_col = numeric(n)
for(j in 1:n)
{
centered_col[j] = X[j,i] - mean_i
}
Y = cbind(Y,centered_col)
}
colnames(Y) = colnames(X)
return (Y)
}
mean_center = function(X)
{
#X: nxp matrix
n = nrow(X)
p = ncol(X)
#n: number of casses
#p: number of features/variables
Y = NULL
for(i in 1:p)
{
mean_i = mean(X[,i])
centered_col = numeric(n)
for(j in 1:n)
{
centered_col[j] = X[j,i] - mean_i
}
Y = cbind(Y,centered_col)
}
colnames(Y) = colnames(X)
return (Y)
}
y  = mean_center(data)
y
dim(data) == y
dim(data) == dim(y)
is.matrix(y)
Y
y
?sd()
?sd
?sd
?sd
help(sd())
help(sd
)
?sd
sd(y[,1])
standardize = function(Y)
{
#Y: mean centered matrix
n = nrow(X)  # n number of casses
p = ncol(X)  # p number of features/variables
#S: Matrix to store standardized columns
S = NULL
#iterate through each columnn
for(i in 1:p)
{
standard_error_i = sd(Y[,i]) / sqrt(n)  # compute standard error for each column
standardize_col = numeric(n)            # vector to stored mean standardized column
for(j in 1:n)
standardize_col[j] = Y[j,i] / standard_error_i  # divide each element by standard error
S = cbind(S,standardize_col)                      # add standardized column to S
}
colnames(S) = colnames(Y)
return (S)
}
standardize(y)
data = read.csv("D:/data-science/SC562-ML-I/ALL CSV FILES - 2nd Edition/Advertising.csv")
data = data[2:4]
mean_center = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = NULL
#iterate through each columnn
for(i in 1:p)
{
#compute mean of ith columns
mean_i = mean(X[,i])
#vector to stored mean centered columns
centered_col = numeric(n)
#subtract mean from each entry
for(j in 1:n)
centered_col[j] = X[j,i] - mean_i
#add the column to Y matrix
Y = cbind(Y,centered_col)
}
colnames(Y) = colnames(X)
return (Y)
}
Y = mean_center(data)
dim(Y)
S = standardize(Y)
standardize = function(Y)
{
#Y: mean centered matrix
n = nrow(Y)  # n number of casses
p = ncol(Y)  # p number of features/variables
#S: Matrix to store standardized columns
S = NULL
#iterate through each columnn
for(i in 1:p)
{
standard_error_i = sd(Y[,i]) / sqrt(n)  # compute standard error for each column
standardize_col = numeric(n)            # vector to stored mean standardized column
for(j in 1:n)
standardize_col[j] = Y[j,i] / standard_error_i  # divide each element by standard error
S = cbind(S,standardize_col)                      # add standardized column to S
}
colnames(S) = colnames(Y)
return (S)
}
S = standardize(Y)
S
dim(S)
closeAllConnections()
trans(Y)
t(Y)
dim(t(y))
pca_from_correlation = function(X)
{
n = nrow(X)
Y = mean_center(X)
S = standardize(Y)
C = (t(Y) %*% Y) /  (n-1)
}
pca_from_correlation = function(X)
{
n = nrow(X)
Y = mean_center(X)
S = standardize(Y)
C = (t(Y) %*% Y) /  (n-1)
return(C)
}
pca_from_correlation(data)
pca_from_correlation(data)
pca_from_correlation = function(X)
{
n = nrow(X)
Y = mean_center(X)
S = standardize(Y)
C = (t(S) %*% S) /  (n-1)
return(C)
}
pca_from_correlation(data)
data = read.csv("D:/data-science/SC562-ML-I/ALL CSV FILES - 2nd Edition/Advertising.csv")
data = data[2:4]
mean_center = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = NULL
#iterate through each columnn
for(i in 1:p)
{
#compute mean of ith columns
mean_i = mean(X[,i])
#vector to stored mean centered columns
centered_col = numeric(n)
#subtract mean from each entry
for(j in 1:n)
centered_col[j] = X[j,i] - mean_i
#add the column to Y matrix
Y = cbind(Y,centered_col)
}
return (Y)
}
standardize = function(Y)
{
#Y: mean centered matrix
n = nrow(Y)  # n number of casses
p = ncol(Y)  # p number of features/variables
#S: Matrix to store standardized columns
S = NULL
#iterate through each columnn
for(i in 1:p)
{
standard_error_i = sd(Y[,i])   # compute standard error for each column
standardize_col = numeric(n)            # vector to stored mean standardized column
for(j in 1:n)
standardize_col[j] = Y[j,i] / standard_error_i  # divide each element by standard error
S = cbind(S,standardize_col)                      # add standardized column to S
}
return (S)
}
pca_from_correlation = function(X)
{
n = nrow(X)
Y = mean_center(X)
S = standardize(Y)
C = (t(S) %*% S) /  (n-1)
return(C)
}
pca(data)
pca_from_correlation(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # compute mean of ith columns
standard_error_i = sd(Y[,i])   # compute standard error for each column
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / standard_error_i
}
return (Y)
}
pca_from_correlation = function(X)
{
n = nrow(X)
Y = mean_center(X)
C = (t(Y) %*% Y) /  (n-1)
return(C)
}
pca_from_correlation(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # compute mean of ith columns
standard_error_i = sd(Y[,i])   # compute standard error for each column
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / standard_error_i
}
return (Y)
}
pca_from_correlation = function(X)
{
n = nrow(X)
Y = scale(X)
C = (t(Y) %*% Y) /  (n-1)
return(C)
}
pca_from_correlation(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
print(dim(Y))
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # compute mean of ith columns
sd(Y[,i])   # compute standard error for each column
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / standard_error_i
}
return (Y)
}
scale(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
print(dim(Y))
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # mean of ith columns
sd_i = sd(Y[,i])               #standard deviation of ith column
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / sd_i
}
return (Y)
}
scale(data)
data = read.csv("D:/data-science/SC562-ML-I/ALL CSV FILES - 2nd Edition/Advertising.csv")
data = data[2:4]
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
print(dim(Y))
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # mean of ith columns
sd_i = sd(Y[,i])               #standard deviation of ith column
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / sd_i
}
return (Y)
}
scale(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
print(Y)
print(dim(Y))
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # mean of ith columns
sd_i = sd(Y[,i])               #standard deviation of ith column
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / sd_i
}
return (Y)
}
scale(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
print(Y)
print(dim(Y))
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # mean of ith columns
sd_i = sd(Y[,i])               # standard deviation of ith column
print(mean_i)
print(sd_i)
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / sd_i
}
return (Y)
}
scale(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store mean centered columns
Y = matrix(0,n,p)
print(Y)
print(dim(Y))
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # mean of ith columns
sd_i = sd(X[,i])               # standard deviation of ith column
print(mean_i)
print(sd_i)
#subtract mean from each entry
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / sd_i
}
return (Y)
}
scale(data)
pca_from_correlation = function(X)
{
n = nrow(X)
Y = scale(X)
C = (t(Y) %*% Y) /  (n-1)
return(C)
}
pca_from_correlation(data)
?eigen()
help(eigen())
help(eigen
)
?eigen
pca_from_correlation(data)
C = pca_from_correlation(data)
scale = function(X)
{
#X: nxp matrix
#n: number of casses
n = nrow(X)
#p: number of features/variables
p = ncol(X)
#Y: Matrix to store scaled data columns
Y = matrix(0,n,p)
#iterate through each columnn
for(i in 1:p)
{
mean_i = mean(X[,i])           # mean of ith columns
sd_i = sd(X[,i])               # standard deviation of ith column
#subtract mean from each entry and divide by standard deviation
for(j in 1:n)
Y[j,i] = (X[j,i] - mean_i) / sd_i
}
return (Y)
}
pca_from_correlation = function(X)
{
n = nrow(X)
Y = scale(X)
C = (t(Y) %*% Y) /  (n-1)
return(C)
}
C = pca_from_correlation(data)
decomp = eigen(C)
decomp$values
decomp$vectors
install.packages("ISLR")
install.packages("ISLR")
install.packages("ISLR")
install.packages("ISLR")
